/*
 * Copyright (C) 2017 Abdullah Shekhar
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package passwordmanager.gui;

import java.awt.BorderLayout;
import java.awt.Image;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.ImageIcon;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JRootPane;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.SwingUtilities;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.PopupMenuEvent;
import javax.swing.event.PopupMenuListener;
import javax.swing.table.DefaultTableModel;
import passwordmanager.bean.Account;

import passwordmanager.service.AccountService;
import passwordmanager.util.AESEncryption;
import passwordmanager.util.PasswordGenerator;

/**
 *
 * @author Abdullah Shekhar
 */
public class Accounts extends javax.swing.JInternalFrame {

    /**
     * Creates new form Accounts
     */
    public Accounts() {
        initComponents();
        setButtonIcon();
        this.setTitle("All Account Information");
        tableTest();
        clear();
        addPopupTable();
        if (AccountService.readAccounts() != null) {
            accountList = AccountService.readAccounts();
        }
        populateTable();
        JRootPane rootPane = SwingUtilities.getRootPane(btnSave);
        rootPane.setDefaultButton(btnSave);
        setComponentFocus();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlAccountInfo = new javax.swing.JPanel();
        lblUserName = new javax.swing.JLabel();
        lblPassword = new javax.swing.JLabel();
        txtUserName = new javax.swing.JTextField();
        txtPassword = new javax.swing.JTextField();
        btnGeneratePassword = new javax.swing.JButton();
        chkNumeric = new javax.swing.JCheckBox();
        chkLowerCase = new javax.swing.JCheckBox();
        chkUpperCase = new javax.swing.JCheckBox();
        chkSpecialChar = new javax.swing.JCheckBox();
        lblLength = new javax.swing.JLabel();
        spnrLength = new javax.swing.JSpinner();
        lblUrl = new javax.swing.JLabel();
        btnDelete = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        txtUrl = new javax.swing.JTextField();
        btnClear = new javax.swing.JButton();
        lblType = new javax.swing.JLabel();
        txtType = new javax.swing.JTextField();
        pnlTest = new javax.swing.JPanel();
        lblSecurityQuestion = new javax.swing.JLabel();
        txtSequrityQuestion = new javax.swing.JTextField();
        lblAnswer = new javax.swing.JLabel();
        txtAnswer = new javax.swing.JTextField();
        lblRecoveryContact = new javax.swing.JLabel();
        txtRecoveryContact = new javax.swing.JTextField();
        pnlRecords = new javax.swing.JPanel();

        setPreferredSize(new java.awt.Dimension(568, 549));

        pnlAccountInfo.setBorder(javax.swing.BorderFactory.createTitledBorder("Account Info"));

        lblUserName.setText("User Name:");

        lblPassword.setText("Password:");

        btnGeneratePassword.setText("Generate Password");
        btnGeneratePassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGeneratePasswordActionPerformed(evt);
            }
        });

        chkNumeric.setSelected(true);
        chkNumeric.setText("0-9");

        chkLowerCase.setSelected(true);
        chkLowerCase.setText("a-z");

        chkUpperCase.setSelected(true);
        chkUpperCase.setText("A-Z");

        chkSpecialChar.setText("Special Char");

        lblLength.setText("Length");

        spnrLength.setModel(new javax.swing.SpinnerNumberModel(6, 6, 25, 1));

        lblUrl.setText("URL:");

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        lblType.setText("Type:");

        pnlTest.setBorder(javax.swing.BorderFactory.createTitledBorder("Account Recovery Data"));

        lblSecurityQuestion.setText("Security Question:");

        lblAnswer.setText("Answer:");

        lblRecoveryContact.setText("Recovery Contact:");

        javax.swing.GroupLayout pnlTestLayout = new javax.swing.GroupLayout(pnlTest);
        pnlTest.setLayout(pnlTestLayout);
        pnlTestLayout.setHorizontalGroup(
            pnlTestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTestLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlTestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(pnlTestLayout.createSequentialGroup()
                        .addComponent(lblSecurityQuestion)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtSequrityQuestion, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlTestLayout.createSequentialGroup()
                        .addGroup(pnlTestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblAnswer)
                            .addComponent(lblRecoveryContact))
                        .addGap(10, 10, 10)
                        .addGroup(pnlTestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtRecoveryContact, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtAnswer, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlTestLayout.setVerticalGroup(
            pnlTestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTestLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlTestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSecurityQuestion)
                    .addComponent(txtSequrityQuestion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlTestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtAnswer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblAnswer))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlTestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtRecoveryContact, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblRecoveryContact))
                .addGap(193, 193, 193))
        );

        javax.swing.GroupLayout pnlAccountInfoLayout = new javax.swing.GroupLayout(pnlAccountInfo);
        pnlAccountInfo.setLayout(pnlAccountInfoLayout);
        pnlAccountInfoLayout.setHorizontalGroup(
            pnlAccountInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAccountInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlAccountInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlAccountInfoLayout.createSequentialGroup()
                        .addComponent(lblPassword)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlAccountInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(pnlAccountInfoLayout.createSequentialGroup()
                                .addGroup(pnlAccountInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(chkNumeric)
                                    .addComponent(lblLength))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pnlAccountInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pnlAccountInfoLayout.createSequentialGroup()
                                        .addComponent(chkLowerCase)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(chkUpperCase)
                                        .addGap(2, 2, 2)
                                        .addComponent(chkSpecialChar))
                                    .addComponent(spnrLength, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(btnGeneratePassword)))
                    .addGroup(pnlAccountInfoLayout.createSequentialGroup()
                        .addComponent(lblUserName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtUserName, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlAccountInfoLayout.createSequentialGroup()
                        .addGroup(pnlAccountInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblUrl)
                            .addComponent(lblType))
                        .addGap(32, 32, 32)
                        .addGroup(pnlAccountInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(pnlAccountInfoLayout.createSequentialGroup()
                                .addComponent(btnSave)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnUpdate)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnDelete)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnClear))
                            .addComponent(txtType, javax.swing.GroupLayout.DEFAULT_SIZE, 267, Short.MAX_VALUE)
                            .addComponent(txtUrl))))
                .addGap(18, 18, 18)
                .addComponent(pnlTest, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlAccountInfoLayout.setVerticalGroup(
            pnlAccountInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAccountInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlAccountInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlTest, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlAccountInfoLayout.createSequentialGroup()
                        .addGroup(pnlAccountInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblUserName)
                            .addComponent(txtUserName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlAccountInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblPassword)
                            .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlAccountInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(chkNumeric)
                            .addComponent(chkLowerCase)
                            .addComponent(chkUpperCase)
                            .addComponent(chkSpecialChar))
                        .addGap(2, 2, 2)
                        .addGroup(pnlAccountInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblLength)
                            .addComponent(spnrLength, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnGeneratePassword)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlAccountInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblType)
                            .addComponent(txtType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlAccountInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblUrl)
                            .addComponent(txtUrl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlAccountInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnSave)
                            .addComponent(btnUpdate)
                            .addComponent(btnDelete)
                            .addComponent(btnClear))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlRecords.setBorder(javax.swing.BorderFactory.createTitledBorder("Records"));
        pnlRecords.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlRecords, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlAccountInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlAccountInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlRecords, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        if (txtUserName.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Enter user name!");
            txtUserName.grabFocus();
        } else if (txtPassword.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Enter password or generate new one!");
            txtPassword.grabFocus();
        } else {

            Account account = new Account();
            account.setUserName(txtUserName.getText().trim());
            account.setPassword(AESEncryption.encrypt(txtPassword.getText(), secretKey));
            account.setType(txtType.getText());
            account.setUrl(txtUrl.getText());
            account.setSecretKey(passwordmanager.Global.secretKey);
            account.setSecurityQuestion(txtSequrityQuestion.getText());
            account.setSecurityAnswer(txtAnswer.getText());
            account.setRecoveryContact(txtRecoveryContact.getText());
            accountList.add(account);
            if (AccountService.insertAccount(accountList)) {
                JOptionPane.showMessageDialog(this, "Saved Successfully", "Password Manager", 1);
                populateTable();
                clear();
            }

        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        if (txtUserName.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Enter user name!");
            txtUserName.grabFocus();
        } else if (txtPassword.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Enter password or generate new one!");
            txtPassword.grabFocus();
        } else {
            Account account = new Account();
            account.setUserName(txtUserName.getText().trim());
            account.setPassword(AESEncryption.encrypt(txtPassword.getText(), secretKey));
            account.setType(txtType.getText());
            account.setUrl(txtUrl.getText());
            account.setSecretKey(passwordmanager.Global.secretKey);
            account.setSecurityQuestion(txtSequrityQuestion.getText());
            account.setSecurityAnswer(txtAnswer.getText());
            account.setRecoveryContact(txtRecoveryContact.getText());
            accountList.set(updateId, account);
            if (AccountService.insertAccount(accountList)) {
                JOptionPane.showMessageDialog(this, "Updated Successfully", "Password Manager", 1);
                populateTable();
                clear();
            }
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        accountList.remove(updateId);
        if (AccountService.insertAccount(accountList)) {
            JOptionPane.showMessageDialog(this, "Deleted Successfully", "Password Manager", 1);
            populateTable();
            clear();
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        clear();
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnGeneratePasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGeneratePasswordActionPerformed
        if (!chkLowerCase.isSelected() && !chkUpperCase.isSelected() && !chkNumeric.isSelected() && !chkSpecialChar.isSelected()) {
            JOptionPane.showMessageDialog(this, "Please select atleast one checkbox to generate passwored!");
        } else {
            txtPassword.setText(PasswordGenerator.genetratePassword(chkUpperCase.isSelected(), chkLowerCase.isSelected(), chkNumeric.isSelected(), chkSpecialChar.isSelected(), (int) spnrLength.getValue()));
        }
    }//GEN-LAST:event_btnGeneratePasswordActionPerformed

    private void setButtonIcon() {
        Image image = Toolkit.getDefaultToolkit().getImage(UserLogin.class.getResource("/resources/res/save.jpg"));
        Image newimg = image.getScaledInstance(16, 16, java.awt.Image.SCALE_SMOOTH);
        ImageIcon imageIcon = new ImageIcon(newimg);
        btnSave.setIcon(imageIcon);

        image = Toolkit.getDefaultToolkit().getImage(UserLogin.class.getResource("/resources/res/update.jpg"));
        newimg = image.getScaledInstance(16, 16, java.awt.Image.SCALE_SMOOTH);
        imageIcon = new ImageIcon(newimg);
        btnUpdate.setIcon(imageIcon);

        image = Toolkit.getDefaultToolkit().getImage(UserLogin.class.getResource("/resources/res/delete.png"));
        newimg = image.getScaledInstance(16, 16, java.awt.Image.SCALE_SMOOTH);
        imageIcon = new ImageIcon(newimg);
        btnDelete.setIcon(imageIcon);

        image = Toolkit.getDefaultToolkit().getImage(UserLogin.class.getResource("/resources/res/clear.jpg"));
        newimg = image.getScaledInstance(16, 16, java.awt.Image.SCALE_SMOOTH);
        imageIcon = new ImageIcon(newimg);
        btnClear.setIcon(imageIcon);
    }

    private void clear() {
        txtUserName.setText("");
        txtPassword.setText("");
        txtType.setText("");
        txtUrl.setText("");
        txtSequrityQuestion.setText("");
        txtAnswer.setText("");
        txtRecoveryContact.setText("");
        btnSave.setEnabled(true);
        btnUpdate.setEnabled(false);
        btnDelete.setEnabled(false);
        table.clearSelection();
        txtUserName.grabFocus();
    }

    private void populateTable() {
        tableData.clear();
        if (accountList != null) {
            for (int i = 0; i < accountList.size(); i++) {
                if (!passwordmanager.Global.secretKey.equals(accountList.get(i).getSecretKey())) {
                    JOptionPane.showMessageDialog(this, "Secret Key Mismatch Error!!!", passwordmanager.Global.APP_NAME, 0);
                    accountList = new ArrayList<>();
                    break;
                }
                Vector<String> rowOne = new Vector<String>();
                rowOne.addElement(accountList.get(i).getUserName());
                rowOne.addElement(AESEncryption.decrypt(accountList.get(i).getPassword(), secretKey));
                rowOne.addElement(accountList.get(i).getType());
                rowOne.addElement(accountList.get(i).getUrl());
                rowOne.addElement(accountList.get(i).getSecurityQuestion());
                rowOne.addElement(accountList.get(i).getSecurityAnswer());
                rowOne.addElement(accountList.get(i).getRecoveryContact());

                tableData.add(rowOne);
            }

            table.revalidate();
            table.repaint();
        }

    }

    private void addPopupTable() {
        final JPopupMenu popupMenu = new JPopupMenu();
        JMenuItem copyUserName = new JMenuItem("Copy User Name");
        JMenuItem copyPassword = new JMenuItem("Copy Password");
        JMenuItem copyURL = new JMenuItem("Copy URL");
        JMenuItem copySecurityQuestion = new JMenuItem("copy Security Question");
        JMenuItem copySecurityAnswer = new JMenuItem("Copy Security Answer");
        JMenuItem copyRecoveryContact = new JMenuItem("Copy Recovery Contact");
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        copyUserName.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                StringSelection selection = new StringSelection(model.getValueAt(table.getSelectedRow(), 0).toString());
                Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                clipboard.setContents(selection, selection);
                //System.out.println(table.getSelectedRow() + " : " + table.getSelectedColumn());
                //JOptionPane.showMessageDialog(null, "Right-click performed on table and choose DELETE");
            }
        });
        copyPassword.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                StringSelection selection = new StringSelection(model.getValueAt(table.getSelectedRow(), 1).toString());
                Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                clipboard.setContents(selection, selection);
                //JOptionPane.showMessageDialog(null, "Right-click performed on table and choose DELETE");
            }
        });
        copyURL.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                StringSelection selection = new StringSelection(model.getValueAt(table.getSelectedRow(), 3).toString());
                Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                clipboard.setContents(selection, selection);
                //JOptionPane.showMessageDialog(null, "Right-click performed on table and choose DELETE");
            }
        });
        copySecurityQuestion.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                StringSelection selection = new StringSelection(model.getValueAt(table.getSelectedRow(), 4).toString());
                Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                clipboard.setContents(selection, selection);
                //JOptionPane.showMessageDialog(null, "Right-click performed on table and choose DELETE");
            }
        });
        copySecurityAnswer.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                StringSelection selection = new StringSelection(model.getValueAt(table.getSelectedRow(), 5).toString());
                Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                clipboard.setContents(selection, selection);
                //JOptionPane.showMessageDialog(null, "Right-click performed on table and choose DELETE");
            }
        });
        copyRecoveryContact.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                StringSelection selection = new StringSelection(model.getValueAt(table.getSelectedRow(), 6).toString());
                Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                clipboard.setContents(selection, selection);
                //JOptionPane.showMessageDialog(null, "Right-click performed on table and choose DELETE");
            }
        });
        popupMenu.add(copyUserName);
        popupMenu.add(copyPassword);
        popupMenu.add(copyURL);
        popupMenu.add(copySecurityQuestion);
        popupMenu.add(copySecurityAnswer);
        popupMenu.add(copyRecoveryContact);
        table.setComponentPopupMenu(popupMenu);
        popupMenu.addPopupMenuListener(new PopupMenuListener() {

            @Override
            public void popupMenuWillBecomeVisible(PopupMenuEvent e) {
                SwingUtilities.invokeLater(new Runnable() {
                    @Override
                    public void run() {
                        int rowAtPoint = table.rowAtPoint(SwingUtilities.convertPoint(popupMenu, new Point(0, 0), table));
                        if (rowAtPoint > -1) {
                            table.setRowSelectionInterval(rowAtPoint, rowAtPoint);
                        }
                    }
                });
            }

            @Override
            public void popupMenuWillBecomeInvisible(PopupMenuEvent e) {
                // TODO Auto-generated method stub

            }

            @Override
            public void popupMenuCanceled(PopupMenuEvent e) {
                // TODO Auto-generated method stub

            }
        });
    }

    private void tableTest() {
        columnNames.addElement("User Name");
        columnNames.addElement("Password");
        columnNames.addElement("Type");
        columnNames.addElement("URL");
        columnNames.addElement("Security Question");
        columnNames.addElement("Answer");
        columnNames.addElement("Recovery Contact");
        table = new JTable(tableData, columnNames);
        populateTable();
        listSelectionModel = table.getSelectionModel();
        listSelectionModel.addListSelectionListener(new SharedListSelectionHandler());
        table.setSelectionModel(listSelectionModel);
        JScrollPane tablePane = new JScrollPane(table);

        //pnlTest.setLayout(new BorderLayout());
        //pnlTest.add(tablePane, BorderLayout.CENTER);
        pnlRecords.setLayout(new BorderLayout());
        pnlRecords.add(tablePane, BorderLayout.CENTER);

    }

    private void setComponentFocus() {
        txtUserName.setNextFocusableComponent(txtPassword);
        txtUrl.setNextFocusableComponent(txtSequrityQuestion);
        txtRecoveryContact.setNextFocusableComponent(btnSave);
    }

    private int updateId = 0;

    private final String secretKey = "Ami obhimani, chiro-khubdho hiyar katorota, batha sunibirh";
    private ArrayList<Account> accountList = new ArrayList<>();
    //JTable tblAccountInfo;
    private ListSelectionModel listSelectionModel;
    private JTable table;
    Vector<Vector> tableData = new Vector<Vector>();
    Vector<String> columnNames = new Vector<String>();

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnGeneratePassword;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JCheckBox chkLowerCase;
    private javax.swing.JCheckBox chkNumeric;
    private javax.swing.JCheckBox chkSpecialChar;
    private javax.swing.JCheckBox chkUpperCase;
    private javax.swing.JLabel lblAnswer;
    private javax.swing.JLabel lblLength;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblRecoveryContact;
    private javax.swing.JLabel lblSecurityQuestion;
    private javax.swing.JLabel lblType;
    private javax.swing.JLabel lblUrl;
    private javax.swing.JLabel lblUserName;
    private javax.swing.JPanel pnlAccountInfo;
    private javax.swing.JPanel pnlRecords;
    private javax.swing.JPanel pnlTest;
    private javax.swing.JSpinner spnrLength;
    private javax.swing.JTextField txtAnswer;
    private javax.swing.JTextField txtPassword;
    private javax.swing.JTextField txtRecoveryContact;
    private javax.swing.JTextField txtSequrityQuestion;
    private javax.swing.JTextField txtType;
    private javax.swing.JTextField txtUrl;
    private javax.swing.JTextField txtUserName;
    // End of variables declaration//GEN-END:variables

    class SharedListSelectionHandler implements ListSelectionListener {

        public void valueChanged(ListSelectionEvent e) {
            int k = table.getSelectedRow();
            try {
                DefaultTableModel model = (DefaultTableModel) table.getModel();
                txtUserName.setText(model.getValueAt(table.getSelectedRow(), 0).toString());
                try {
                    txtPassword.setText(model.getValueAt(table.getSelectedRow(), 1).toString());
                } catch (NullPointerException npe) {

                }
                try {
                    txtType.setText(model.getValueAt(table.getSelectedRow(), 2).toString());
                } catch (NullPointerException npe) {

                }
                try {
                    txtUrl.setText(model.getValueAt(table.getSelectedRow(), 3).toString());
                } catch (NullPointerException npe) {

                }
                try {
                    txtSequrityQuestion.setText(model.getValueAt(table.getSelectedRow(), 4).toString());
                } catch (NullPointerException npe) {

                }
                try {
                    txtAnswer.setText(model.getValueAt(table.getSelectedRow(), 5).toString());
                } catch (NullPointerException npe) {

                }
                try {
                    txtRecoveryContact.setText(model.getValueAt(table.getSelectedRow(), 6).toString());
                } catch (NullPointerException npe) {

                }

                updateId = table.getSelectedRow();
                btnSave.setEnabled(false);
                btnUpdate.setEnabled(true);
                btnDelete.setEnabled(true);
            } catch (ArrayIndexOutOfBoundsException aiobe) {
                //aiobe.printStackTrace();
            }
        }
    }
}
